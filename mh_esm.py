import torch
import esm
model, alphabet = esm.pretrained.esm2_t33_650M_UR50D()

batch_converter = alphabet.get_batch_converter()
model.cuda()
model.eval() 

data = [
    ("protein1", "MRTDKEIFVSVDVETSGPIPGKYSMLSIGACVAFEPSKQFSCYLKPISEDFIPAAMEVTGLSLEKLHVDGLDPVDAMVQFKEWINSVVKEDETVVFVGFNASFDWSFINYYFHVYLGDNPFGIAALDIKSMYFGVSHASWRLTRSSEIAKVVKPETYGDHDALHDARYQAELFRLIDKLSEKKKLDR"),
    ("protein2", "MRTDKEIFVSVDVETSGPIPGKYSMLSIGACVAFEPSKQFSCYLKPISEDFIPAAMEVTGLSLEKLHVDGLDPVDAMVQFKEWINSVVKEDETVVFVGFNASFDWSFINYYFHVYLGDNPFGIAALDIKSMYFGVSHASWRLTRSSEIAKVVKPETYGDHDALHDARYQAELFRLIDKLSEKKKLDR"),
    ("protein3", "MRTDKEIFVSVDVETSGPIPGKYSMLSIGACVAFEPSKQFSCYLKPISEDFIPAAMEVTGLSLEKLHVDGLDPVDAMVQFKEWINSVVKEDETVVFVGFNASFDWSFINYYFHVYLGDNPFGIAALDIKSMYFGVSHASWRLTRSSEIAKVVKPETYGDHDALHDARYQAELFRLIDKLSEKKKLDR"),
    ("protein5", "MRTDKEIFVSVDVETSGPIPGKYSMLSIGACVAFEPSKQFSCYLKPISEDFIPAAMEVTGLSLEKLHVDGLDPVDAMVQFKEWINSVVKEDETVVFVGFNASFDWSFINYYFHVYLGDNPFGIAALDIKSMYFGVSHASWRLTRSSEIAKVVKPETYGDHDALHDARYQAELFRLIDKLSEKKKLDR"),
    ("protein6", "MRTDKEIFVSVDVETSGPIPGKYSMLSIGACVAFEPSKQFSCYLKPISEDFIPAAMEVTGLSLEKLHVDGLDPVDAMVQFKEWINSVVKEDETVVFVGFNASFDWSFINYYFHVYLGDNPFGIAALDIKSMYFGVSHASWRLTRSSEIAKVVKPETYGDHDALHDARYQAELFRLIDKLSEKKKLDR"),
    ("protein7", "MRTDKEIFVSVDVETSGPIPGKYSMLSIGACVAFEPSKQFSCYLKPISEDFIPAAMEVTGLSLEKLHVDGLDPVDAMVQFKEWINSVVKEDETVVFVGFNASFDWSFINYYFHVYLGDNPFGIAALDIKSMYFGVSHASWRLTRSSEIAKVVKPETYGDHDALHDARYQAELFRLIDKLSEKKKLDR"),
    ("protein8", "MRTDKEIFVSVDVETSGPIPGKYSMLSIGACVAFEPSKQFSCYLKPISEDFIPAAMEVTGLSLEKLHVDGLDPVDAMVQFKEWINSVVKEDETVVFVGFNASFDWSFINYYFHVYLGDNPFGIAALDIKSMYFGVSHASWRLTRSSEIAKVVKPETYGDHDALHDARYQAELFRLIDKLSEKKKLDR"),
    ("protein9", "MRTDKEIFVSVDVETSGPIPGKYSMLSIGACVAFEPSKQFSCYLKPISEDFIPAAMEVTGLSLEKLHVDGLDPVDAMVQFKEWINSVVKEDETVVFVGFNASFDWSFINYYFHVYLGDNPFGIAALDIKSMYFGVSHASWRLTRSSEIAKVVKPETYGDHDALHDARYQAELFRLIDKLSEKKKLDR"),
    ("protein10", "MRTDKEIFVSVDVETSGPIPGKYSMLSIGACVAFEPSKQFSCYLKPISEDFIPAAMEVTGLSLEKLHVDGLDPVDAMVQFKEWINSVVKEDETVVFVGFNASFDWSFINYYFHVYLGDNPFGIAALDIKSMYFGVSHASWRLTRSSEIAKVVKPETYGDHDALHDARYQAELFRLIDKLSEKKKLDR"),
    ("protein11", "MRTDKEIFVSVDVETSGPIPGKYSMLSIGACVAFEPSKQFSCYLKPISEDFIPAAMEVTGLSLEKLHVDGLDPVDAMVQFKEWINSVVKEDETVVFVGFNASFDWSFINYYFHVYLGDNPFGIAALDIKSMYFGVSHASWRLTRSSEIAKVVKPETYGDHDALHDARYQAELFRLIDKLSEKKKLDR"),
    ("protein12", "MRTDKEIFVSVDVETSGPIPGKYSMLSIGACVAFEPSKQFSCYLKPISEDFIPAAMEVTGLSLEKLHVDGLDPVDAMVQFKEWINSVVKEDETVVFVGFNASFDWSFINYYFHVYLGDNPFGIAALDIKSMYFGVSHASWRLTRSSEIAKVVKPETYGDHDALHDARYQAELFRLIDKLSEKKKLDR"),
    ("protein13", "MRTDKEIFVSVDVETSGPIPGKYSMLSIGACVAFEPSKQFSCYLKPISEDFIPAAMEVTGLSLEKLHVDGLDPVDAMVQFKEWINSVVKEDETVVFVGFNASFDWSFINYYFHVYLGDNPFGIAALDIKSMYFGVSHASWRLTRSSEIAKVVKPETYGDHDALHDARYQAELFRLIDKLSEKKKLDR"),
    ("protein14", "MRTDKEIFVSVDVETSGPIPGKYSMLSIGACVAFEPSKQFSCYLKPISEDFIPAAMEVTGLSLEKLHVDGLDPVDAMVQFKEWINSVVKEDETVVFVGFNASFDWSFINYYFHVYLGDNPFGIAALDIKSMYFGVSHASWRLTRSSEIAKVVKPETYGDHDALHDARYQAELFRLIDKLSEKKKLDR"),
    ("protein15", "MRTDKEIFVSVDVETSGPIPGKYSMLSIGACVAFEPSKQFSCYLKPISEDFIPAAMEVTGLSLEKLHVDGLDPVDAMVQFKEWINSVVKEDETVVFVGFNASFDWSFINYYFHVYLGDNPFGIAALDIKSMYFGVSHASWRLTRSSEIAKVVKPETYGDHDALHDARYQAELFRLIDKLSEKKKLDR"),
    ("protein16", "MRTDKEIFVSVDVETSGPIPGKYSMLSIGACVAFEPSKQFSCYLKPISEDFIPAAMEVTGLSLEKLHVDGLDPVDAMVQFKEWINSVVKEDETVVFVGFNASFDWSFINYYFHVYLGDNPFGIAALDIKSMYFGVSHASWRLTRSSEIAKVVKPETYGDHDALHDARYQAELFRLIDKLSEKKKLDR"),
    ("protein17", "MRTDKEIFVSVDVETSGPIPGKYSMLSIGACVAFEPSKQFSCYLKPISEDFIPAAMEVTGLSLEKLHVDGLDPVDAMVQFKEWINSVVKEDETVVFVGFNASFDWSFINYYFHVYLGDNPFGIAALDIKSMYFGVSHASWRLTRSSEIAKVVKPETYGDHDALHDARYQAELFRLIDKLSEKKKLDR"),
    ("protein18", "MRTDKEIFVSVDVETSGPIPGKYSMLSIGACVAFEPSKQFSCYLKPISEDFIPAAMEVTGLSLEKLHVDGLDPVDAMVQFKEWINSVVKEDETVVFVGFNASFDWSFINYYFHVYLGDNPFGIAALDIKSMYFGVSHASWRLTRSSEIAKVVKPETYGDHDALHDARYQAELFRLIDKLSEKKKLDR"),
    ("protein19", "MRTDKEIFVSVDVETSGPIPGKYSMLSIGACVAFEPSKQFSCYLKPISEDFIPAAMEVTGLSLEKLHVDGLDPVDAMVQFKEWINSVVKEDETVVFVGFNASFDWSFINYYFHVYLGDNPFGIAALDIKSMYFGVSHASWRLTRSSEIAKVVKPETYGDHDALHDARYQAELFRLIDKLSEKKKLDR"),
    ("protein20", "MRTDKEIFVSVDVETSGPIPGKYSMLSIGACVAFEPSKQFSCYLKPISEDFIPAAMEVTGLSLEKLHVDGLDPVDAMVQFKEWINSVVKEDETVVFVGFNASFDWSFINYYFHVYLGDNPFGIAALDIKSMYFGVSHASWRLTRSSEIAKVVKPETYGDHDALHDARYQAELFRLIDKLSEKKKLDR")
]
batch_labels, batch_strs, batch_tokens = batch_converter(data)
batch_lens = (batch_tokens != alphabet.padding_idx).sum(1)

# Extract per-residue representations (on CPU)
with torch.no_grad():
    results = model.mh_sampling(batch_tokens.cuda())
